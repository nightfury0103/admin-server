{"version":3,"sources":["modules/errorPages/ComingSoon/index.tsx"],"names":["useStyles","makeStyles","form","display","flexDirection","alignItems","marginBottom","textField","width","button","fontWeight","Fonts","BOLD","fontSize","textTransform","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","email","required","ComingSoon","dispatch","useDispatch","classes","messages","useIntl","animation","delay","py","xl","flex","justifyContent","textAlign","component","mb","xs","md","id","color","grey","MEDIUM","mx","maxWidth","validateOnChange","initialValues","onSubmit","data","resetForm","showMessage","className","placeholder","name","label","variant","type","sm","src","alt"],"mappings":"6QAiBMA,EAAYC,aAAW,WAC3B,MAAO,CACLC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,aAAc,IAEhBC,UAAW,CACTC,MAAO,OACPF,aAAc,IAEhBG,OAAQ,CACNC,WAAYC,IAAMC,KAClBC,SAAU,GACVC,cAAe,kBAIfC,EAAc,SAACC,GACnB,MAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KACMC,EAAYD,EAAKE,OAASF,EAAKG,QAAUH,EAAKE,MAAQ,GAC5D,OACE,cAAC,IAAD,uCACML,GACAE,GAFN,IAGEK,WAAYH,EACZC,QAASD,MAKTI,EAAmBC,IAAW,CAClCC,MAAOD,MAEJC,MAAM,gDACNC,SAAS,iCAwFCC,UArFI,WACjB,IAAMC,EAAWC,cAEXC,EAAU/B,IACTgC,EAAYC,cAAZD,SAEP,OACE,cAAC,IAAD,CAAYE,UAAU,uBAAuBC,MAAO,IAApD,SACE,eAAC,IAAD,CACEC,GAAI,CAACC,GAAI,GACTC,KAAM,EACNnC,QAAQ,OACRC,cAAc,SACdmC,eAAe,SACflC,WAAW,SACXmC,UAAU,SAPZ,UAQE,eAAC,IAAD,WACE,eAAC,IAAD,CACEC,UAAU,KACVC,GAAI,CAACC,GAAI,EAAGN,GAAI,IAChBxB,SAAU,CAAC8B,GAAI,GAAIC,GAAI,IACvBlC,WAAYC,IAAMC,KAJpB,UAKE,cAAC,IAAD,CAAciC,GAAG,qBALnB,OAOA,eAAC,IAAD,CACEH,GAAI,CAACC,GAAI,EAAGN,GAAI,IAChBS,MAAOC,IAAK,KACZrC,WAAYC,IAAMqC,OAClBnC,SAAU,GAJZ,UAKE,cAAC,IAAD,UACE,cAAC,IAAD,CAAcgC,GAAG,+BAEnB,cAAC,IAAD,UACE,cAAC,IAAD,CAAcA,GAAG,kCAGrB,cAAC,IAAD,CAAKI,GAAG,OAAOP,GAAI,EAAGQ,SAAU,IAAhC,SACE,cAAC,IAAD,CACEC,kBAAkB,EAClBC,cAAe,CACb1B,MAAO,IAETF,iBAAkBA,EAClB6B,SAAU,SAACC,EAAD,GAAwB,IAAhBC,EAAe,EAAfA,UAChB1B,EACE2B,YACExB,EAAS,kCAGbuB,KAZJ,SAcG,kBACC,eAAC,IAAD,CAAME,UAAW1B,EAAQ7B,KAAzB,UACE,cAACa,EAAD,CACE2C,YAAY,QACZC,KAAK,QACLC,MAAO,cAAC,IAAD,CAAcf,GAAG,wBACxBY,UAAW1B,EAAQxB,UACnBsD,QAAQ,aAGV,cAAC,IAAD,CACEA,QAAQ,YACRf,MAAM,UACNgB,KAAK,SACLL,UAAW1B,EAAQtB,OAJrB,SAKE,cAAC,IAAD,CAAcoC,GAAG,6BAM3B,cAAC,IAAD,CAAKH,GAAI,EAAGQ,SAAU,CAACP,GAAI,IAAKoB,GAAI,IAAK1B,GAAI,KAAM7B,MAAM,OAAzD,SACE,qBACEwD,IAAK,gDACLC,IAAI,aAIV,cAAC,IAAD","file":"static/js/20.5b444684.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {useDispatch} from 'react-redux';\r\nimport {Form, Formik, useField} from 'formik';\r\nimport * as yup from 'yup';\r\nimport {showMessage} from '../../../redux/actions';\r\nimport InfoView from '@crema/core/InfoView';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {grey} from '@material-ui/core/colors';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\nimport AppAnimate from '../../../@crema/core/AppAnimate';\r\nimport {useIntl} from 'react-intl';\r\n\r\nconst useStyles = makeStyles(() => {\r\n  return {\r\n    form: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      marginBottom: 12,\r\n    },\r\n    textField: {\r\n      width: '100%',\r\n      marginBottom: 20,\r\n    },\r\n    button: {\r\n      fontWeight: Fonts.BOLD,\r\n      fontSize: 16,\r\n      textTransform: 'capitalize',\r\n    },\r\n  };\r\n});\r\nconst MyTextField = (props: any) => {\r\n  const [field, meta] = useField(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : '';\r\n  return (\r\n    <TextField\r\n      {...props}\r\n      {...field}\r\n      helperText={errorText}\r\n      error={!!errorText}\r\n    />\r\n  );\r\n};\r\n\r\nconst validationSchema = yup.object({\r\n  email: yup\r\n    .string()\r\n    .email('The Email you entered is not a valid format!')\r\n    .required('Please enter Email Address!'),\r\n});\r\n\r\nconst ComingSoon = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const classes = useStyles();\r\n  const {messages} = useIntl();\r\n\r\n  return (\r\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\r\n      <Box\r\n        py={{xl: 8}}\r\n        flex={1}\r\n        display='flex'\r\n        flexDirection='column'\r\n        justifyContent='center'\r\n        alignItems='center'\r\n        textAlign='center'>\r\n        <Box>\r\n          <Box\r\n            component='h3'\r\n            mb={{xs: 4, xl: 10}}\r\n            fontSize={{xs: 20, md: 24}}\r\n            fontWeight={Fonts.BOLD}>\r\n            <IntlMessages id='error.comingSoon' />!\r\n          </Box>\r\n          <Box\r\n            mb={{xs: 5, xl: 12}}\r\n            color={grey[600]}\r\n            fontWeight={Fonts.MEDIUM}\r\n            fontSize={16}>\r\n            <Typography>\r\n              <IntlMessages id='error.comingSoonMessage1' />\r\n            </Typography>\r\n            <Typography>\r\n              <IntlMessages id='error.comingSoonMessage2' />\r\n            </Typography>\r\n          </Box>\r\n          <Box mx='auto' mb={5} maxWidth={384}>\r\n            <Formik\r\n              validateOnChange={true}\r\n              initialValues={{\r\n                email: '',\r\n              }}\r\n              validationSchema={validationSchema}\r\n              onSubmit={(data, {resetForm}) => {\r\n                dispatch(\r\n                  showMessage(\r\n                    messages['error.comingSoonNotification'] as string,\r\n                  ),\r\n                );\r\n                resetForm();\r\n              }}>\r\n              {() => (\r\n                <Form className={classes.form}>\r\n                  <MyTextField\r\n                    placeholder='Email'\r\n                    name='email'\r\n                    label={<IntlMessages id='common.emailAddress' />}\r\n                    className={classes.textField}\r\n                    variant='outlined'\r\n                  />\r\n\r\n                  <Button\r\n                    variant='contained'\r\n                    color='primary'\r\n                    type='submit'\r\n                    className={classes.button}>\r\n                    <IntlMessages id='error.notifyMe' />\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </Box>\r\n          <Box mb={5} maxWidth={{xs: 300, sm: 400, xl: 672}} width='100%'>\r\n            <img\r\n              src={'/assets/images/errorPageImages/comingsoon.png'}\r\n              alt='404'\r\n            />\r\n          </Box>\r\n        </Box>\r\n        <InfoView />\r\n      </Box>\r\n    </AppAnimate>\r\n  );\r\n};\r\n\r\nexport default ComingSoon;\r\n"],"sourceRoot":""}