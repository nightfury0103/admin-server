{"version":3,"sources":["modules/pages/AddProxy.tsx"],"names":["useStyles","makeStyles","theme","container","display","flexWrap","autoComplete","marginLeft","spacing","marginRight","textField","dense","marginTop","menu","width","validationSchema","yup","country","required","ip","port","countriesArr","Object","keys","countries","map","countryCode","label","name","id","filter","length","AddProxy","proxies","dispatch","useDispatch","classes","React","useState","countryObject","values","setValues","handleChange","event","target","value","validateOnChange","initialValues","onSubmit","data","setSubmitting","onSaveProxyData","fullname","isSubmitting","noValidate","className","disablePortal","options","sx","onChange","e","v","renderInput","params","defaultValue","margin","variant","color","type","onClick","saveData","style"],"mappings":"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","file":"static/js/24.d5be00ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n// import MenuItem from '@material-ui/core/MenuItem';\r\nimport { Form, Formik } from 'formik';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as yup from 'yup';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { countries } from 'country-data';\r\nimport { onSaveProxyData } from 'redux/actions';\r\nimport { Button } from '@material-ui/core';\r\nimport { Proxy } from 'types/models/Proxy';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    autoComplete: {\r\n        display: 'inline-block',\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    dense: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    menu: {\r\n        width: 200,\r\n    },\r\n}));\r\nconst validationSchema = yup.object({\r\n    country: yup\r\n        .string()\r\n        .required('Country required'),\r\n    ip: yup\r\n        .string()\r\n        .required('IP required'),\r\n    port: yup\r\n        .string()\r\n        .required('PORT required'),\r\n});\r\n\r\ninterface ActionProps {\r\n    proxies: Proxy[];\r\n}\r\n\r\nconst countriesArr = Object.keys(countries).map((countryCode: string) => (\r\n    {\r\n        label: countries[countryCode].name ? countries[countryCode].name + '(' + countryCode + ')' : 'Default',\r\n        id: (countries[countryCode].name ? countryCode : 'default')\r\n    }\r\n)).filter((country) => country.id.length === 2 && country.id !== 'UK' || country.id === 'default')\r\n\r\nconst AddProxy: React.FC<ActionProps> = ({ proxies }) => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const [values, setValues] = React.useState({\r\n        ip: '',\r\n        port: '',\r\n        country: '',\r\n        countryObject: { label: '', id: '' }\r\n    });\r\n\r\n    const handleChange = (name: string) => (event: any) => {\r\n        setValues({ ...values, [name]: event.target.value });\r\n    };\r\n\r\n    const handleChangeCountry = (value: { id: string, label: string }) => {\r\n        setValues({ ...values, country: value.id, countryObject: value });\r\n    }\r\n    return (\r\n        <>\r\n            <Formik\r\n                validateOnChange={true}\r\n                initialValues={{\r\n                    country: '',\r\n                    ip: '',\r\n                    port: '',\r\n                }}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(data, { setSubmitting }) => {\r\n                    setSubmitting(true);\r\n                    dispatch(onSaveProxyData({ country: data.country, port: data.port, ip: data.ip, fullname: '' }));\r\n                    setSubmitting(false);\r\n                }}>\r\n                {({ isSubmitting }) => (\r\n                    <Form noValidate autoComplete='off'>\r\n                        <Autocomplete\r\n                            className={classes.autoComplete}\r\n                            disablePortal\r\n                            id='countries'\r\n                            options={countriesArr}\r\n                            sx={{ width: 300 }}\r\n                            value={values.countryObject}\r\n                            onChange={(e, v) => {\r\n                                v && handleChangeCountry(v)\r\n                            }}\r\n                            renderInput={(params: any) => <TextField {...params} label='Country' />}\r\n                        />\r\n                        {/* <TextField\r\n                            id='outlined-select-country'\r\n                            select\r\n                            label='Select'\r\n                            className={classes.textField}\r\n                            value={values.country}\r\n                            onChange={handleChange('country')}\r\n                            SelectProps={{\r\n                                MenuProps: {\r\n                                    className: classes.menu,\r\n                                },\r\n                            }}\r\n                            helperText='Please select proxy country'\r\n                            margin='normal'\r\n                            name='country'\r\n                            variant='outlined'>\r\n                            <MenuItem key='default' value='default'>Default</MenuItem>\r\n                            {Object.keys(countries).map((countryCode: string) => {\r\n                                return countryCode === 'all' || countryCode === '' || countryCode.length === 3 ? null : (\r\n                                    <MenuItem key={countryCode} value={countryCode}>\r\n                                        {countries[countryCode].name}\r\n                                    </MenuItem>\r\n                                )\r\n                            })}\r\n                        </TextField> */}\r\n                        <TextField\r\n                            id='outlined-ip'\r\n                            label='IP ADDRESS'\r\n                            defaultValue=''\r\n                            name='ip'\r\n                            className={classes.textField}\r\n                            value={values.ip}\r\n                            onChange={handleChange('ip')}\r\n                            margin='normal'\r\n                            variant='outlined'\r\n                        />\r\n                        <TextField\r\n                            id='outlined-port'\r\n                            label='PORT'\r\n                            defaultValue=''\r\n                            name='port'\r\n                            className={classes.textField}\r\n                            value={values.port}\r\n                            onChange={handleChange('port')}\r\n                            margin='normal'\r\n                            variant='outlined'\r\n                        />\r\n                        <Button\r\n                            variant='contained'\r\n                            color='secondary'\r\n                            type='submit'\r\n                            onClick={() => {\r\n                                const fullname = countries[values.country] ? countries[values.country].name : 'Unknown';\r\n                                let saveData = {\r\n                                    country: values.country,\r\n                                    ip: values.ip,\r\n                                    port: values.port,\r\n                                    fullname: fullname\r\n                                }\r\n                                dispatch(onSaveProxyData(saveData))\r\n                                setValues({\r\n                                    country: '',\r\n                                    ip: '',\r\n                                    port: '',\r\n                                    countryObject: { label: '', id: '' }\r\n                                });\r\n                            }}\r\n                            // disabled={isSubmitting}\r\n                            style={{ marginTop: 20 }}\r\n                        >\r\n                            SAVE\r\n                        </Button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddProxy;"],"sourceRoot":""}