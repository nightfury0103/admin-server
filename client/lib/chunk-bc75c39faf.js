"use strict";(self.webpackChunkblockchain_wallet_v4_frontend=self.webpackChunkblockchain_wallet_v4_frontend||[]).push([[5396],{"./src/modals/Eth/TransferEth/index.tsx":(e,t,s)=>{s.r(t),s.d(t,{default:()=>z});var a=s("../../node_modules/react/index.js"),r=s("../../node_modules/react-redux/es/index.js"),n=s("../../node_modules/redux/es/redux.js"),l=s("../blockchain-wallet-v4/src/index.ts"),d=s("./src/data/index.ts"),o=s("./src/data/types.ts"),i=s("./src/providers/ModalEnhancer/index.tsx"),c=s("../../node_modules/ramda/es/prop.js"),m=s("../../node_modules/ramda/es/head.js"),h=s("../../node_modules/ramda/es/propOr.js"),u=s("../../node_modules/ramda/es/lift.js");const extractAddress=e=>(0,c.Z)("addr",(0,m.Z)(e)),getData=e=>{const t=d.wl.qz.S3.getPayment(e),s=d.wl.vE.Nu.BF.getAccounts(e).map(extractAddress);return(0,u.Z)(((e,t)=>({ethAddr:e,ethBalance:(0,h.Z)("0","effectiveBalance",t),txFee:(0,h.Z)("0","fee",t)})))(s,t)};var p=s("./node_modules/react-intl/lib/src/components/message.js"),x=s("../../node_modules/redux-form/es/reduxForm.js"),f=s("../../node_modules/styled-components/dist/styled-components.browser.esm.js"),E=s("../blockchain-info-components/src/index.js"),g=s("./src/components/Display/CoinDisplay/index.tsx"),w=s("./src/components/Form/index.ts");const b=f.ZP.div`
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
  width: 100%;
  margin: 20px 0 10px;
  background-color: ${e=>e.theme.grey000};
  border: 1px solid ${e=>e.theme.grey200};
`,y=f.ZP.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  padding: 5px;
  box-sizing: border-box;
`,A=(0,x.Z)({form:"transferEth"})((e=>{const{ethAddr:t,ethBalance:s,handleSubmit:r,legacyEthAddr:n,txFee:l}=e;return a.createElement(E.u_,{size:"medium"},a.createElement(E.xB,{closeButton:!1},a.createElement(p.Z,{id:"modals.transfereth.title1",defaultMessage:"Updating Ethereum Address"})),a.createElement(E.fe,null,a.createElement(w.l0,{onSubmit:r},a.createElement(E.Qt,{inline:!0},a.createElement(E.xv,{size:"14px",weight:400},a.createElement(p.Z,{id:"modals.transfereth.para1_new",defaultMessage:"As we leave our beta program we want to make sure your Secret Private Key Recovery Phrase is compatible with other Ethereum wallets."})),a.createElement(E.xv,{size:"14px",weight:400},a.createElement(p.Z,{id:"modals.transfereth.para2",defaultMessage:"Because of this, we've updated your Ethereum address and are requiring a transfer of your funds."})),a.createElement(E.xv,{size:"14px",weight:400},a.createElement(p.Z,{id:"modals.transfereth.para3",defaultMessage:"Don't worry, your old address is still valid."}))),a.createElement(b,null,a.createElement(y,null,a.createElement(E.xv,{size:"14px",weight:600},a.createElement(p.Z,{id:"copy.from",defaultMessage:"From"}),":"),a.createElement(E.xv,{size:"14px",weight:400},n)),a.createElement(y,null,a.createElement(E.xv,{size:"14px",weight:600},a.createElement(p.Z,{id:"modals.transfereth.to",defaultMessage:"To:"})),a.createElement(E.xv,{size:"14px",weight:400},t)),a.createElement(y,null,a.createElement(E.xv,{size:"14px",weight:600},a.createElement(p.Z,{id:"modals.transfereth.amount",defaultMessage:"Amount:"})),a.createElement(g.Z,{size:"14px",coin:"ETH",weight:400},s)),a.createElement(y,null,a.createElement(E.xv,{size:"14px",weight:600},a.createElement(p.Z,{id:"modals.transfereth.txfee",defaultMessage:"Transaction Fee:"})),a.createElement(g.Z,{size:"14px",coin:"ETH",weight:400},l))),a.createElement(E.zx,{"data-e2e":"transferEth",nature:"primary",fullwidth:!0,type:"submit",disabled:e.submitting},e.submitting?a.createElement(E.JA,{height:"20px",width:"20px",color:"white"}):a.createElement(p.Z,{id:"modals.transfereth.confirm1",defaultMessage:"Transfer Funds"})))))})),v={ethAddr:"",ethBalance:"0",txFee:"0"};class Z extends a.PureComponent{constructor(){super(...arguments),this.handleSubmit=()=>{const{ethAddr:e,ethBalance:t}=this.props.data.getOrElse(v);this.props.transferEthActions.confirmTransferEth({effectiveBalance:t,to:e})}}componentDidMount(){this.props.transferEthActions.initialized({from:this.props.legacyEthAddr,type:"LEGACY"})}componentDidUpdate(){if(l.Nt.Success.is(this.props.data)){const{ethBalance:e,txFee:t}=this.props.data.getOrElse(v);parseFloat(t)>parseFloat(e)&&this.props.modalActions.closeAllModals()}}render(){const{data:e,legacyEthAddr:t}=this.props;return e.cata({Failure:()=>null,Loading:()=>null,NotAsked:()=>null,Success:e=>a.createElement(A,Object.assign({ethAddr:e.ethAddr,ethBalance:e.ethBalance,onSubmit:this.handleSubmit,legacyEthAddr:t,txFee:e.txFee},this.props))})}}const _=(0,r.connect)((e=>({data:getData(e)})),(e=>({modalActions:(0,n.bindActionCreators)(d.Nw.qk,e),transferEthActions:(0,n.bindActionCreators)(d.Nw.qz.S3,e)}))),z=(0,n.compose)((0,i.Z)(o.tl.TRANSFER_ETH_MODAL),_)(Z)}}]);